in django:
    there may be multiple apps in a project 
    and also one app may be in multiple projects

    App is a plugable web application 

    To create an app in project we can run the command 
        python manage.py startapp app_name

        Now to add the urls of app_name in your project you can
            from django.urls import path, include 
            urlpatterns = [
                path('url_path/', include('app_name.urls'))
            ]

            and Now in your app_name create a urls.py file and create the urlpatterns list there and include the url there

        Now to add the template in the app:
            go to the settings.py of your project and then in the 'INSTALLED_APPS' list append your app_name
            and then in your app create a templates folder

        To add the static file in the app:
            create a static folder
            go to the template and load the static file by: 
                {% load static %}
                and then print the value of static file by:
                    {% static 'shop/mystatic.txt' %}

        
Models -> A model is the single, definite source of information about your data.
            It contains the essential fields and behabiors of the data you are storing.
            Generally, each model maps to a single database table.

    
    django default stores the data in the sqlite3 database

    sqlite is a RDBMS that stores the data in the files.

    To apply all the migration in our project we run the command:
        python manage.py migrate
    
    migrate -> It applies all pending database migrations.
 
        i.e. it ensures that the necessary tables and schema changes are created as defined in the project's migration files. 

        This process synchronizes the database structure with the models defined in the application.

        migration - In simple words migration means the changes which we do in model we store that
            if we create migration then we doesn't change the database instead of we only store the information that we are only doing this changes and this changes will to come

            and if we apply those migration then we do the change in the database

    
    To create the model in django we can:
        from django.db import models

        # Create your models here.
        class Product(models.Model):
            product_id = models.AutoField    # models field reference
            # place other field as your requirement

    Now in the settings.py file of our project:
        go into the INSTALLED_APPS list and then replace the app_name with the 'app_name.apps.App_nameConfig'

    Now to store the migration we can:
        python manage.py makemigrations

    Now to apply the migration we can:
        python manage.py migrate 


To create the superuser in django we can:
    python manage.py createsuperuser

If we make any table in models.py then we need to register our table in admin.py

    To register the table we can:

        from .models import table_name

        admin.site.register(table_name)

To upload the media files in our website we can:
    go to settings.py file of the project and then:
        import os

        # Managing media 
        MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
        MEDIA_URL = '/media/'

    then go to the urls.py of the project and then do:
        from django.conf import settings
        from django.conf.urls.static import static

        urlpatterns = [
            # your url paths
        ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


To access the database from shell(CLI) we can:
    python manage.py shell
    from app.models import table_name   # it import the table_name from the models.py
    table_name.objects.all()            # it displays all the entity of the table table_name
    
    to add the new product in our database using shell we can:
        from django.utils import timezone # to use the current time
        myprod = Product(product_name="mouse", category="computer", subCategory="devices", price=12, desc="chhota h yai", pub_date=timezone.now())
        myprod.save()       # to save the changes

        # accessing the data based on the constraints
        a = Product.objects.get(product_name="mouse")
        a.category

Template Inheritance:  --- it works on DRY(Donot Repeat YourSelf) principle
    It allows you to create a base template with common elements (like headers, footers, and navigation bars)
        and extend it in other templates. 
    This helps avoid code duplication and makes maintaining templates easier.

    To inherit the base template we can use {% extends %} for ex:
        {% extends 'shop/basic.html' %}     # i.e. template inherits the structure from basic.html, making it reusable across multiple pages.
        
        Django uses {% block %}...{% endblock %} to define sections that child templates can override.
            For ex:
                {% block title %}{% endblock %}
                    This block allows child templates to insert specific content (e.g., page title) while keeping the base structure intact.